[{"authors":null,"categories":["Castellano"],"content":"Kirk Goldsberry es una de las figuras más destacadas en el mundo de la estadística avanzada en la NBA. Se le conoce principalmente por el uso de gráficos de tiro en sus análisis. Este es un ejemplo en el que se muestran todos los tiros que ha realizado Lebron James a lo largo de su carrera:\nHappy Birthday, LeBron His constellation so far... pic.twitter.com/4HuCjTgl4x\n\u0026mdash; Kirk Goldsberry (@kirkgoldsberry) December 30, 2018  Los gráficos de tiro pueden ser útiles para, por ejemplo, identificar tendencias en ataque de un determinado jugador/equipo, mostrar en qué zonas del campo un jugador es más efectivo o analizar qué tipo de tiros un equipo permite al rival.\nLa liga en la que juego, la LEB Oro, proporciona gráficos de tiro en la plataforma Baloncesto en Vivo. Para esta entrada he creado un paquete de R, rfeb, con el que poder extraer las coordenadas de los tiros de esta página web para luego obtener gráficos de tiro del partido o partidos que queramos.\nDicho esto, por alguna extraña razón, la plataforma Baloncesto en Vivo no ofrece ningún menú de selección para acceder a las estadísticas de partidos de jornadas anteriores (o temporadas anteriores). Tan solo son visibles los partidos de la jornada más reciente.\nEs posible acceder a partidos anteriores sabiendo el identificador del partido y añadiéndolo a la url base (http://baloncestoenvivo.feb.es/Game/). Sin embargo, al parecer se van eliminando los datos a medida que avanzan las jornadas. Según escribo esta entrada sólo es posible acceder a los partidos disputados después de la jornada 13 de esta temporada.\nAdemás de esta incomprensible limitación, la recogida de datos parece poco fiable. Según he podido comprobar, varias canchas de la competición producen gráficos de tiro que obviamente no son correctos.\nHuesca y Real Canoe son los principales sospechosos. He encontrado varios casos pero mirad, por ejemplo, el partido en la pista del ZTE Real Canoe donde según el gráfico de tiro no se hizo ningún tiro dentro de la zona por parte de ninguno de los dos equipos… Hasta que este tipo de errores no se eliminen, cualquier análisis con estos datos será de dudosa validez.\nGráficos de tiro rfeb es un paquete de R que he creado para trabajar con datos disponibles en Baloncesto en Vivo. rfeb contiene dos funciones principales:\n extract_shots(): Extrae los datos de tiro de Baloncesto en Vivo de los identificadores de partido que introducimos\n plot_shotchart(): Crea gráficos de tiro con los datos que introducimos\n  Puedes instalar rfeb de la siguiente manera:\n# install.packages(\u0026quot;devtools\u0026quot;) devtools::install_github(\u0026quot;solmos/rfeb\u0026quot;) Puedes echarle un ojo al código de estas funciones aquí. Nótese que aunque en este caso extraeré datos de la LEB Oro, también sería posible trabajar con datos de las otras competiciones FEB disponibles en Baloncesto en Vivo.\nA continuación voy a mostrar, utilizando rfeb, cómo obtener gráficos de tiro de todos los partidos de la última jornada de la primera vuelta de la LEB Oro disputada el fin de semana del 11/01/2019.\nLos identificadores de los partidos en este caso van desde el 2010208 al 2010216. Usamos extract_shots() para obtener los datos recogidos de los tiros que se hicieron en estos partidos. Obtenemos un data frame en el que cada fila representa un tiro, de los cuales se muestran las siguientes variables:\n t = Tiempo desde el comienzo del partido\n x, y = Coordenadas del tiro\n team = Equipo del jugador que realizó el tiro\n player = Dorsal del jugador que realizó el tiro\n quarter = Cuarto en el que se realizó el tiro\n game = Identificador del partido\n made = Tiro fallado (Missed) o metido (Made)\n  library(rfeb) game_ids \u0026lt;- 2010208:2010216 shots \u0026lt;- extract_shots(game_ids) head(shots) ## t x y team player quarter game made ## 1 00:39 715.20 833.85 SÁENZ HORECA ARABERRI 3 1 2010208 Missed ## 2 00:47 824.20 245.25 LEYMA CORUÑA 22 1 2010208 Made ## 3 01:23 1069.45 485.05 LEYMA CORUÑA 4 1 2010208 Missed ## 4 01:35 628.00 523.20 SÁENZ HORECA ARABERRI 10 1 2010208 Missed ## 5 01:43 72.10 283.40 SÁENZ HORECA ARABERRI 3 1 2010208 Missed ## 6 01:48 687.95 207.10 LEYMA CORUÑA 1 1 2010208 Made Una vez tenemos los datos de los tiros, usamos la función plot_shotchart() para visualizar el gráfico de tiro. La función usa ggplot2 para producir el gráfico y es posible especificar los argumentos que queremos para el mapping de la función geom_point(). Por ejemplo, podemos elegir el color de los puntos según fueron o no canasta.\nA continuación muestro todos los tiros de la jornada en un sólo gráfico:\nplot_shotchart(shots, color = made) Seguramente no querramos mostrar todos los tiros. Es posible usar otras funciones de ggplot2 para adaptar el gráfico a nuestras necesidades. Por ejemplo, podemos usar facet_wrap() para obtener una matriz de gráficos según el partido:\nlibrary(ggplot2) plot_shotchart(shots, color = made) + facet_wrap(~ game) Por último, utilizaremos dplyr para filtrar los tiros que queremos mostrar. Digamos que quiero ver qué tiros hice yo en el partido que disputé contra Palencia en esta jornada. Este partido se corresponde con el identificador 2010215 y el número que llevo en mi camiseta es el 41:\nlibrary(dplyr) shots %\u0026gt;% filter(game == 2010215 \u0026amp; team == \u0026quot;COVIRAN GRANADA\u0026quot; \u0026amp; player == \u0026quot;41\u0026quot;) %\u0026gt;% plot_shotchart(color = made) + ggtitle(\u0026quot;Sergio Olmos vs. Palencia\u0026quot;) rfeb todavía está en proceso de desarrollo. Mi idea es ampliar la funcionalidad de este paquete para poder analizar no solo datos de tiro, sino también datos jugada-a-jugada. Escribiré más entradas en el blog a medida que vaya añadiendo más funciones al paquete.\n Recursos adicionales  Web Scraping 201: finding the API\n Getting started with httr\n Drawing a basketball court with R\n   ","date":1548288000,"expirydate":-62135596800,"kind":"page","lang":"es","lastmod":1548288000,"objectID":"d25eb34c63816b606cbbed1fbbfba14b","permalink":"/es/post/2019-01-24-graficos-de-tiro-con-r/shotcharts-with-r/","publishdate":"2019-01-24T00:00:00Z","relpermalink":"/es/post/2019-01-24-graficos-de-tiro-con-r/shotcharts-with-r/","section":"post","summary":"Cómo obtener gráficos de tiro de la liga LEB Oro usando el paquete rfeb","tags":["R","Baloncesto"],"title":"rfeb: Gráficos de tiro con R","type":"post"},{"authors":null,"categories":["English"],"content":"I was reading about the Hidden beauty of multiplication tables and I thought it could be fun to make some of the cool plots in that article with R.\nAs I was trying to visualize new patterns in the multiplication table, I ended up with some useful fuctions that I decided to put in a simple R package called multable that you can install from GitHub.\nThe multiplication table Consider the standard \\(10 \\times 10\\) multiplication table, with the first row and the first column taking the values \\(1\\) through \\(10\\), forming a grid with the corresponding products.\nlibrary(tidyverse) # Data frame with all the values of the 10x10 multiplication table multiplication_table \u0026lt;- tibble( x = 1:10, y = 1:10 ) %\u0026gt;% # Get all combination of x and y complete(x, y) %\u0026gt;% # Get the product of all combinations mutate(product = x * y) ggplot(multiplication_table, aes(x, y)) + geom_tile(color = \u0026quot;white\u0026quot;) + geom_text(aes(label = product), color = \u0026quot;white\u0026quot;) + # We want the table to start with 1 in the upper-left corner scale_y_continuous(trans = \u0026quot;reverse\u0026quot;) + # We want to always display the tables as squares coord_fixed() + theme_void() For purposes that we will see next, I am going to add a row and a column of zeros above and to the left of our table, respectively:\nmultiplication_table \u0026lt;- tibble( x = 0:10, y = 0:10 ) %\u0026gt;% complete(x, y) %\u0026gt;% mutate(product = x * y) ggplot(multiplication_table, aes(x, y)) + geom_tile(color = \u0026quot;white\u0026quot;) + geom_text(aes(label = product), color = \u0026quot;white\u0026quot;) + scale_y_continuous(trans = \u0026quot;reverse\u0026quot;) + coord_fixed() + theme_void() Next, we will discover some beautiful symmetries by coloring the rectangles of the multiplication table that correspond to multiples of a number \\(k\\) for various values of \\(k\\).\n Single multiples We say that \\(c\\) is a multiple of \\(k\\) if \\(c = n k\\) for some integer \\(n\\), which is called the multiplier. So we can tell if a given number \\(c\\) is a multiple of \\(k\\) if the division \\(c\\) over \\(k\\) has remainder 0.\nLet’s begin with \\(k = 2\\). I am going to color the cells corresponding to multiples of \\(2\\) in one color and non-multiples of \\(2\\) in another color. Check out the pattern it emerges:\nlibrary(wesanderson) m2 \u0026lt;- multiplication_table %\u0026gt;% mutate(multiple_of_2 = product %% 2 == 0) # Color palette chosen from the wesanderson package colors \u0026lt;- wes_palette(name = \u0026quot;Zissou1\u0026quot;, n = 2) ggplot(m2, aes(x, y)) + geom_tile(aes(fill = multiple_of_2), color = \u0026quot;white\u0026quot;) + geom_text(aes(label = product), color = \u0026quot;white\u0026quot;) + scale_y_continuous(trans = \u0026quot;reverse\u0026quot;) + coord_fixed() + scale_fill_manual(values = colors, name = \u0026quot;Multiple of 2?\u0026quot;, labels = c(\u0026quot;No\u0026quot;, \u0026quot;Yes\u0026quot;)) + theme_void() If we look closely we can see that the whole pattern above can be pieced together using the following fundamental block:\nblock_2 \u0026lt;- tibble( x = c(0,1), y = c(0,1) ) %\u0026gt;% complete(x, y) %\u0026gt;% distinct() %\u0026gt;% mutate(product = x * y, multiple = product %% 2 == 0) ggplot(block_2, aes(x, y)) + geom_tile(aes(fill = multiple), color = \u0026quot;white\u0026quot;) + scale_y_continuous(trans = \u0026quot;reverse\u0026quot;) + scale_fill_manual(values = colors, guide = FALSE) + theme_void() As Zoheir Barka explains in his article mentioned at the beginning, the fundamental building block contains \\(k \\times k = 2 \\times 2 = 4\\) cells of the multiplication table. The fact that, in the case of a single multiple, each side of the fundamental building block is \\(k\\) can be useful when plotting our tables.\nWe want to explore the patterns for different values of \\(k\\) so I created a simple function that plots a colored multiplication table for the supplied \\(k\\) and the supplied dimensions. Multiples and non-multiples are colored the same way as before so I chose to drop the legend for aesthetic reasons.\n# Auxiliary function to create a data frame # with the values of the multiplication table create_mtable \u0026lt;- function(xmax, ymax) { data.frame( x = 0:xmax, y = 0:ymax ) %\u0026gt;% complete(x, y) %\u0026gt;% mutate(product = x * y) } # Plot the colored table draw_pattern \u0026lt;- function(k, xmax, ymax) { # Colors chosen from the Zissou1 palette in the wesanderson package colors \u0026lt;- wesanderson::wes_palette(name = \u0026quot;Zissou1\u0026quot;, n = 2) tab \u0026lt;- create_mtable(xmax, ymax) %\u0026gt;% mutate(multiple = product %% k == 0) %\u0026gt;% ggplot(aes(x, y)) + geom_tile(aes(fill = multiple), color = \u0026quot;white\u0026quot;) + geom_text(aes(label = product), color = \u0026quot;white\u0026quot;) + scale_y_continuous(trans = \u0026quot;reverse\u0026quot;) + coord_fixed() + scale_fill_manual(values = colors) + theme_void() + guides(fill = FALSE) tab } We can now easily plot the colored tables for different values of \\(k\\) and see what patterns emerge:\ndraw_pattern(k = 4, xmax = 4 * 3, ymax = 4 * 3) + labs(title = \u0026quot;Multiples of 4\u0026quot;) draw_pattern(6, 6 * 2, 6 * 2) + labs(title = \u0026quot;Multiples of 6\u0026quot;) Notice that we set the “length” of each side of the tables to multiples of \\(k\\) so that the pattern is symmetric.\n Multiple multiples We can plot more interesting (and beautiful) patterns if we use multiple multiples, and corresponding to them, multiple colors.\nConsider the multiples of \\(k_1 = 2\\) and \\(k_2 = 3\\). I will color each square of the multiplication table according to the following criteria:\n Not multiple of neither 2 nor 3\n Multiple only of 2\n Multiple only of 3\n Multiple of both 2 and 3\n  multiple_multiples \u0026lt;- tibble( x = 0:12, y = 0:12 ) %\u0026gt;% complete(x, y) %\u0026gt;% mutate(product = x * y, m2 = product %% 2 == 0, m3 = product %% 3 == 0, inter = interaction(m2, m3)) %\u0026gt;% mutate(interaction = recode_factor(inter, FALSE.FALSE = \u0026quot;Multple of neither\u0026quot;, TRUE.FALSE = \u0026quot;Multiple of 2\u0026quot;, FALSE.TRUE = \u0026quot;Multiple of 3\u0026quot;, TRUE.TRUE = \u0026quot;Multiple of both\u0026quot;)) ggplot(multiple_multiples, aes(x, y)) + geom_tile(aes(fill = interaction), color = \u0026quot;white\u0026quot;) + geom_text(aes(label = product), color = \u0026quot;white\u0026quot;) + scale_fill_brewer(palette = \u0026quot;Pastel1\u0026quot;, name = element_blank()) + scale_y_continuous(trans = \u0026quot;reverse\u0026quot;) + coord_fixed() + theme_void() Notice that I used a \\(12 \\times 12\\) table so that I got a symmetric pattern. I did this because I knew that the fundamental building block is given by the least common multiple of \\(2\\) and \\(3\\). That is, in this case the fundamental block consists of \\(6 \\times 6 = 36\\) little cells.\n multable package I have created a simple R package out of this idea of coloring the factors of different numbers, called multable. You can install it with\n# install.packages(\u0026quot;devtools\u0026quot;) devtools::install_github(\u0026quot;solmos/multable\u0026quot;) As of now, the package contains just two functions:\n create_table() generates a data frame with the grid values and identifies the factors for different values of k\n draw_pattern() plots the multiplication table coloring the different cells according to what value of k a given cell is a factor of\n  Check out the code for these functions here. My plan is to add more functionality to this package but you can actually do some pretty cool visualizations as it is.\n  ","date":1541462400,"expirydate":-62135596800,"kind":"page","lang":"es","lastmod":1541462400,"objectID":"081c8eb970dda2b9f586850f1728e85b","permalink":"/es/post/2018-11-06-multiplication-table/multiplication-table-with-r/","publishdate":"2018-11-06T00:00:00Z","relpermalink":"/es/post/2018-11-06-multiplication-table/multiplication-table-with-r/","section":"post","summary":"I show how to visualize the patterns that emerge in the multiplication table and present an R package I created for this purpose","tags":["R","Mathematics"],"title":"Exploring the multiplication table with R","type":"post"},{"authors":null,"categories":null,"content":"","date":1461708000,"expirydate":-62135596800,"kind":"page","lang":"es","lastmod":1461708000,"objectID":"ab9d6b8d5274fb7e7927b1fc60f36192","permalink":"/es/project/tfm/","publishdate":"2016-04-27T00:00:00+02:00","relpermalink":"/es/project/tfm/","section":"project","summary":"Trabajo de fin de Máster","tags":["statistics","linear mixed models","multilevel models","hierarchical models"],"title":"Analysis of clustered data using linear mixed models","type":"project"}]